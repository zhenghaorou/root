Nginx反向代理  代理（帮你干活的人或物） 调度
后端Web服务器两台，可以使用httpd实现
Nginx采用轮询的方式调用后端Web服务器
两台Web服务器的权重要求设置为不同的值
最大失败次数为1，失败超时时间为30秒

1.web1:
root@web1 ~]# yum  -y  install  httpd
[root@web1 ~]# echo "192.168.2.100" > /var/www/html/index.html
[root@web1 ~]# systemctl restart httpd
[root@web1 ~]# firewall-cmd --set-default-zone=trusted
[root@web1 ~]# setenforce 0

web2:
root@web2 ~]# yum  -y  install  httpd
[root@web2 ~]# echo "192.168.2.200" > /var/www/html/index.html
[root@web2 ~]# systemctl restart httpd
[root@web2 ~]# firewall-cmd --set-default-zone=trusted
[root@web2 ~]# setenforce 0
 
2配置Nginx服务器，添加服务器池，实现反向代理功能
#使用upstream定义后端服务器集群，集群名称任意(如webserver)
#使用server定义集群中的具体服务器和端口
修改/usr/local/nginx/conf/nginx.conf配置文件
http {
.. ..

 
upstream webserver {                         #使用upstream定义后端服务器集群，集群名称任意(如webserver)
                server 192.168.2.100:80;     #使用server定义集群中的具体服务器和端口
                server 192.168.2.200:80;
        }
.. ..
server {
        listen        80;
        server_name  localhost;
            location / {

            proxy_pass http://webserver;  #通过proxy_pass将用户的请求转发给webserver集群   (http://只适合网站代理)
        }
}


配置upstream服务器集群池属性

http {
.. ..
upstream webserver {
                server 192.168.2.100 weight=1 max_fails=1 fail_timeout=30;
                server 192.168.2.200 weight=2 max_fails=2 fail_timeout=30;
                server 192.168.2.101 down;
        }
#weight设置服务器权重值，默认值为1    ：    100 weight=多少次　相比就是　server100 n次：　server200 1次　　例子是1:2
#max_fails设置最大失败次数 
#fail_timeout设置失败超时时间，单位为秒            //失败多少秒在尝试重连
#down标记服务器已关机，不参与集群调度
.. ..
server {
        listen        80;
        server_name  localhost;
            location / {
            proxy_pass http://webserver;
        }
}


设置相同客户端访问相同Web服务器
http {
.. ..
upstream webserver {

                 ip_hash;            #通过ip_hash设置调度规则为：相同客户端访问相同服务器
                server 192.168.2.100 weight=1 max_fails=2 fail_timeout=10;
                server 192.168.2.200 weight=2 max_fails=2 fail_timeout=10;
        }
.. ..
server {
        listen        80;
        server_name  www.tarena.com;
            location / {
            proxy_pass http://webserver;
        }
}





##############################################################################################################

Nginx的TCP/UDP调度器
后端SSH服务器两台
Nginx编译安装时需要使用--with-stream，开启ngx_stream_core_module模块
Nginx采用轮询的方式调用后端SSH服务器
killall nginx
]# rm -rf /usr/local/nginx/     //关掉服务　删除nginx
重新装一遍启用(4层方向代理模块）
> --with-http_ssl_module                                //开启SSL加密功能
> --with-stream                                       //开启4层反向代理功能
> --user=nginx --group=nginx           //用户与组,不加．默认用系统默认用系统户 nodboy

修改/usr/local/nginx/conf/nginx.conf配置文件
stream {
            upstream backend {
               server 192.168.2.100:22;            //后端SSH服务器的IP和端口
               server 192.168.2.200:22;
}
            server {
                listen 12345;         //Nginx监听的端口 （一台主机一个端口号只能被一个服务占用）22已被ssh占用所以这里不能写监听22
                proxy_connect_timeout 1s;         //连接的超时时间，可选配置
                proxy_timeout 3s;
                 proxy_pass backend;
             }
}
http {
.. ..
}
(ssh远程链接)ssh -X root@192.168.4.5 -p12345　测试
ssh进去了服务器然后在指定ip ssh就可以精确链接到想要链接的服务器．

Nginx配置文件，自定义报错页面

harset utf-8;                    //仅需要中文时需要改选项，可选项　　　yum装语言包里面有中文 *font*
error_page   404  /404.html;    //自定义错误页面
vim /usr/local/nginx/html/404.html        //生成错误页面

如何查看服务器状态信息（非常重要的功能）
编译安装时使用--with-http_stub_status_module开启状态页面模块
[root@proxy ~]# tar  -zxvf   nginx-1.12.2.tar.gz
[root@proxy ~]# cd  nginx-1.12.2
[root@proxy nginx-1.12.2]# ./configure   \
> --with-http_ssl_module                        //开启SSL加密功能
> --with-stream                                //开启TCP/UDP代理模块
> --with-http_stub_status_module                //开启status状态页面
[root@proxy nginx-1.12.2]# make && make install    //编译并安装

修改Nginx配置文件，定义状态页面

… …
location /status {                # /后面定义个名字　　firefox 查询／后面写什么就跟什么　查询
                stub_status on;  (状态服务页面开启)
                 #allow IP地址;
                 #deny IP地址;
        }
… …

启用Nginx服务并查看监听端口状态
ss命令可以查看系统中启动的端口信息，该命令常用选项如下：
-a显示所有端口的信息
-n以数字格式显示端口号
-t显示TCP连接的端口
-u显示UDP连接的端口
-l显示服务正在监听的端口信息，如httpd启动后，会一直监听80端口
-p显示监听端口的服务名称是什么（也就是程序名称）
注意：在RHEL7系统中可以使用ss命令替代netstat命令，功能一样，选项一样。

优化后，查看状态页面信息   firefox 192.168.4.5/status
Active connections：当前活动的连接数量。
Accepts：已经接受客户端的连接总数量。
Handled：已经处理客户端的连接总数量。
（一般与accepts一致，除非服务器限制了连接数量）。
Requests：客户端发送的请求数量。
Reading：当前服务器正在读取客户端请求头的数量。
Writing：当前服务器正在写响应信息的数量。
Waiting：当前多少客户端在等待服务器的响应。

3.优化Nginx并发量

优化前使用ab高并发测试        -n:访问总量      -c:人数
ab -n 2000 -c 2000 http://192.168.4.5/
Benchmarking 192.168.4.5 (be patient)
socket: Too many open files (24)                //提示打开文件数量过多

修改Nginx配置文件，增加并发量
vim /usr/local/nginx/conf/nginx.conf

2 #user  nobody;
3 worker_processes  2;       //与CPU核心数量一致
 
12 events {
13     worker_connections  65535;      //每个worker最大并发连接数          
 14 }

4.优化Linux内核参数（最大文件数量）

oot@proxy ~]# ulimit -a                        //查看所有属性值
[root@proxy ~]# ulimit -Hn 100000                //设置硬限制（临时规则）
[root@proxy ~]# ulimit -Sn 100000                //设置软限制（临时规则）
[root@proxy ~]# vim /etc/security/limits.conf
    .. ..
*               soft    nofile            100000
*               hard    nofile            100000
#该配置文件分4列，分别如下：
#用户或组    硬限制或软限制    需要限制的项目   限制的值


5.优化前，使用脚本测试长头部请求是否能获得响应
cat lnmp_soft/buffer.sh
修改Nginx配置文件，增加数据包头部缓存大小

.. ..
http {
client_header_buffer_size    1k;        //默认请求包头信息的缓存    
large_client_header_buffers  4 4k;        //最大请求包头部信息的缓存个数与容量 (4个  4K    =16K)
.. ..
}

步骤五：浏览器本地缓存静态数据
（缓存）
浏览器－－－－－－－－－－服务器
使用Firefox浏览器查看缓存
以Firefox浏览器为例，在Firefox地址栏内输入about:cache将显示Firefox浏览器的缓存信息，如图-3所示，点击List Cache Entries可以查看详细信息。(输入about:cache 然后点击右上角的三横杠　清楚历史记录）
修改Nginx配置文件，定义对静态页面的缓存时间
server {
        listen       80;
        server_name  localhost;
        location / {
            root   html;
            index  index.html index.htm;
        }


　　location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml|mp3)$ {
expires        30d;            //定义客户端缓存时间为30天           #expires 过期时间　缓存时间　　接d

}


验证:cp /usr/share/backgrounds/day.jpg /usr/local/nginx/html  然后再去火狐查看缓存


步骤六：日志切割

日志文件越来越大怎么办？单个文件10G? 如何切割？（非常常见的面试题）
步骤：1. 把旧的日志重命名
2. kill USR1 PID(nginx的进程PID号)
kill 给进程传递某一个信号
kill -l 查看信号
kill 不仅仅能杀进程
1）手动执行
备注：/usr/local/nginx/logs/nginx.pid文件中存放的是nginx的进程PID号。
cd /usr/local/nginx/logs
 mv access.log access2.log
 kill -USR1 $(cat /usr/local/nginx/logs/nginx.pid)    #  -USR1作用 =kill -10 告诉进程文件被拿走了,需要从新生成一个
ls 


#!/bin/bash
date=`date +%Y%m%d`　　　　　　＃定义时间名字的变量
logpath=/usr/local/nginx/logs
mv $logpath/access.log   $logpath/access-$date.log　　　　＃切割旧的访问文件
mv $logpath/error.log   $logpath/error-$date.log　　　　　＃切割旧的报错文件
kill -USR1 $(cat $logpath/nginx.pid)        #产生新文件
[root@proxy ~]# crontab -e
03 03 * * 5  /usr/local/nginx/logbak.sh   






步骤七：对页面进行压缩处理

1）修改Nginx配置文件
[root@proxy ~]# cat /usr/local/nginx/conf/nginx.conf
http {
.. ..
gzip on;                            //开启压缩
gzip_min_length 1000;                //小文件不压缩   #字节
gzip_comp_level 4;                //压缩比率        #1~9选中间值
gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
                                    //对特定文件压缩，类型参考mime.types    #vim /usr/local/nginx/conf/mime.types
.. ..
}


服务器内存缓存

1）如果需要处理大量静态文件，可以将文件缓存在内存，下次访问会更快。
http { 
open_file_cache  max=2000  inactive=20s;　//设置服务器最大缓存2000个文件句柄，关闭20秒内无请求的文件句柄 (20s内没人访问就从内存删掉）
        open_file_cache_valid    60s;　　　　　//文件句柄的有效时间是60秒，60秒后过期（60s无论有没有人访问都会删掉刷新）
        open_file_cache_min_uses 5;　　　　　　　　//只有访问次数超过5次会被缓存
        open_file_cache_errors   off;

} 










 
