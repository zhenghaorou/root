案例5：制作nginx的RPM包

步骤一：安装rpm-build软件
1）安装rpm-build软件包
[root@web1 ~]# yum -y install  rpm-build

２．生成rpmbuild目录结构
]# rpmbuild -ba nginx.spec                //会报错，没有文件或目录
]# ls /root/rpmbuild                    //自动生成的目录结构
BUILD  BUILDROOT  RPMS  SOURCES  SPECS  SRPMS

准备工作，将源码软件复制到SOURCES目录
[root@web1 ~]# cp nginx-1.12.2.tar.gz /root/rpmbuild/SOURCES/

4）创建并修改SPEC配置文件

[root@web1 ~]# vim /root/rpmbuild/SPECS/nginx.spec 
Name:nginx                                        #源码包软件名称   -(不能瞎写)
Version:1.12.2                                    #源码包软件的版本号   (-不能瞎写)
Release:    10                                        #制作的RPM包版本号
Summary: Nginx is a web server software.            #RPM软件的概述    
＃Group:　　　　　　　　　　　　　　　　　　　　　　　　　　//　不属于哪个组直接注释掉　　　
License:GPL                                        #软件的协议   GPL免费软件
URL:    www.test.com                                    #网址
Source0:nginx-1.12.2.tar.gz                        #源码包文件的全称   (-不能瞎写)
#BuildRequires:                                    #制作RPM时的依赖关系
#Requires:                                        #安装RPM时的依赖关系
%description
nginx [engine x] is an HTTP and reverse proxy server.    #软件的详细描述


%post
useradd -s /sbin/nologin nginx                              #非必需操作：安装后脚本(创建账户)

%prep              　　　　　　　　　　　　　　//安装前脚本
%setup -q                                #自动解压源码包，并cd进入目录

%build
./configure --with-http_ssl_module --with-stream --with-http_stub_status_module　　#改为./后想要什么功能自己加

make %{?_smp_mflags}　　　　　　　　　　　　　　　　　//默认不用改
%install
make install DESTDIR=%{buildroot}         //默认不用改

%files
%doc
/usr/local/nginx/*                    #对哪些文件与目录打包
%changelog


步骤二：使用配置文件创建RPM包
1.安装依赖软件包
# yum -y install  gcc  pcre-devel openssl-devel

2）rpmbuild创建RPM软件包
# rpmbuild -ba /root/rpmbuild/SPECS/nginx.spec      //打包
# ls /root/rpmbuild/RPMS/x86_64/nginx-1.12.2-10.x86_64.rpm    


步骤三：安装、卸载软件
[root@web1 ~]# rpm -ivh /root/rpmbuild/RPMS/x86_64/nginx-1.12.2-10.x86_64.rpm 
[root@web1 ~]# rpm -qa |grep nginx
[root@web1 ~]# /usr/local/nginx/sbin/nginx
[root@web1 ~]# curl http://127.0.0.1/


############################################################################################################33
客户机client 服务器proxy
配置GRE VPN （linux默认支持GRE）
启用内核模块ip_gre
创建一个虚拟VPN隧道(10.10.10.0/24)
实现两台主机点到点的隧道通讯

步骤一：启用GRE模块（client和proxy都需要操作）
1）查看计算机当前加载的模块
[root@client ~]# lsmod                            //显示模块列表
[root@client ~]# lsmod  | grep ip_gre            //确定是否加载了gre模块

2)加载模块ip_gre
[root@client ~]# modprobe  ip_gre 

3）查看模块信息
[root@client ~]# modinfo ip_gre
filename:       /lib/modules/3.10.0-693.el7.x86_64/kernel/net/ipv4/ip_gre.ko.xz    //内核模块路径
alias:          netdev-gretap0
alias:          netdev-gre0
alias:          rtnl-link-gretap
alias:          rtnl-link-gre
license:        GPL
rhelversion:    7.4
srcversion:     F37A2BF90692F86E3A8BD15
depends:        ip_tunnel,gre
intree:         Y
vermagic:       3.10.0-693.el7.x86_64 SMP mod_unload modversions 
signer:         CentOS Linux kernel signing key
sig_key:        DA:18:7D:CA:7D:BE:53:AB:05:BD:13:BD:0C:4E:21:F4:22:B6:A4:9C
sig_hashalgo:   sha256
parm:           log_ecn_error:Log packets received with corrupted ECN (bool)
      
关闭模块
rmmod ip_gre     //关闭命令加模块名字

步骤二：Client主机创建VPN隧道

1）创建隧道
ip　命令
ip help

Usage: ip [ OPTIONS ] OBJECT { COMMAND | help }
       ip [ -force ] -batch filename
where  OBJECT := { link | address | addrlabel | route | rule | neigh | ntable |
                   tunnel | tuntap | maddress | mroute | mrule | monitor | xfrm |
                   netns | l2tp | fou | macsec | tcp_metrics | token | netconf | ila |
                   vrf }
       OPTIONS := { -V[ersion] | -s[tatistics] | -d[etails] | -r[esolve] |
                    -h[uman-readable] | -iec |
                    -f[amily] { inet | inet6 | ipx | dnet | mpls | bridge | link } |
                    -4 | -6 | -I | -D | -B | -0 |
                    -l[oops] { maximum-addr-flush-attempts } | -br[ief] |
                    -o[neline] | -t[imestamp] | -ts[hort] | -b[atch] [filename] |
                    -rc[vbuf] [size] | -n[etns] name | -a[ll] | -c[olor]}
查看用法

ip tunnel hlep   //创建隧道　命令查看
Command "hlep" is unknown, try "ip tunnel help"
[root@client ~]# ip tunnel help

Usage: ip tunnel { add | change | del | show | prl | 6rd } [ NAME ]
          [ mode { ipip | gre | sit | isatap | vti } ] [ remote ADDR ] [ local ADDR ]
          [ [i|o]seq ] [ [i|o]key KEY ] [ [i|o]csum ]
          [ prl-default ADDR ] [ prl-nodefault ADDR ] [ prl-delete ADDR ]
          [ 6rd-prefix ADDR ] [ 6rd-relay_prefix ADDR ] [ 6rd-reset ]
          [ ttl TTL ] [ tos TOS ] [ [no]pmtudisc ] [ dev PHYS_DEV ]

Where: NAME := STRING
       ADDR := { IP_ADDRESS | any }
       TOS  := { STRING | 00..ff | inherit | inherit/STRING | inherit/00..ff }
       TTL  := { 1..255 | inherit }
       KEY  := { DOTTED_QUAD | NUMBER }
###################################################################################################
创建隧道

[root@client ~]# ip tunnel add tun0  mode gre  remote 201.1.2.5 local 201.1.2.10

//ip tunnel add创建隧道（隧道名称为tun0），ip tunnel help可以查看帮助
//mode设置隧道使用gre模式
//local后面跟本机的IP地址，remote后面是与其他主机建立隧道的对方IP地址     //ip a s  查看网卡ip状态



  启用该隧道（类似与设置网卡up）
[root@client ~]# ip link show                //查看网卡信息
[root@client ~]# ip link set tun0 up         //设置UP   启用
[root@client ~]# ip link show


为VPN配置隧道IP地址
[root@client ~]# ip addr add 10.10.10.10/24 peer 10.10.10.5/24  dev tun0

//为隧道tun0设置本地IP地址（10.10.10.10.10/24）
//隧道对面的主机IP的隧道IP为10.10.10.5/24
[root@client ~]# ip a s                      //查看IP地址
4）关闭防火墙

proxy服务器也要做

root@proxy ~]# ~]# ip tunnel add tun0  mode gre remote 201.1.2.10 local 201.1.2.5
//ip tunnel add创建隧道（隧道名称为tun0），ip tunnel help可以查看帮助
//mode设置隧道使用gre模式
//local后面跟本机的IP地址，remote后面是与其他主机建立隧道的对方IP地址

启用该隧道（类似与设置网卡up）
[root@proxy ~]# ip link show
[root@proxy ~]# ip link set tun0 up         //设置UP
[root@proxy ~]# ip link show

为VPN配置隧道IP地址
[root@proxy ~]# ip addr add 10.10.10.5/24 peer 10.10.10.10/24  dev tun0
//为隧道tun0设置本地IP地址（10.10.10.10.5/24）
//隧道对面的主机IP的隧道IP为10.10.10.10/24
[root@proxy ~]# ip a s                      //查看IP地址

4）关闭防火墙

开启路由转发、关闭防火墙 1为打开 linux 可以作为一个软件路由器
[root@proxy ~]# echo "1" > /proc/sys/net/ipv4/ip_forward
开启nat




案例2：创建PPTP VPN


部署VPN服务器
装包
cd lnmp_soft/vpn
yum -y install pptpd-1.4.0-2.el7.x86_64.rpm

rpm -qc pptpd

/etc/ppp/options.pptpd
/etc/pptpd.conf
/etc/sysconfig/pptpd

2)修改配置文件
root@proxy ~]# vim /etc/pptpd.conf
105  localip 201.1.2.5                                    //服务器本地IP
106  remoteip 192.168.3.1-50                            //分配给客户端的IP池

root@proxy ~]# vim /etc/ppp/options.pptpd
                                                  //encryption：单词：加密
40 require-mppe-128　　　　//使用MPPE加密数据
66　ms-dns 8.8.8.8                      //DNS服务器　8.8是香港的dns

[root@proxy ~]# vim /etc/ppp/chap-secrets            //修改账户配置文件
jacob           *               123456      *
//用户名        服务器标记               密码         客户端
[root@proxy ~]# echo "1" > /proc/sys/net/ipv4/ip_forward    //开启路由转发

启动服务
[root@proxy ~]# systemctl start pptpd
[root@proxy ~]# systemctl enable pptpd
[root@proxy ~]# firewall-cmd --set-default-zone=trusted

翻墙设置（非必需操作）
[root@proxy ~]# iptables -t nat -A POSTROUTING -s 192.168.3.0/24  -j SNAT --to-source 201.1.2.5




###############################################################################################################

案例3：创建L2TP+IPSec VPN
3.1 问题

使用L2TP协议创建一个支持身份验证与加密的隧道连接
使用IPSec对数据进行加密
为客户端分配192.168.3.0/24的地址池
客户端连接的用户名为：jacob，密码为：123456
预共享密钥为：randpass

实现此案例需要按照如下步骤进行。
步骤一：部署IPSec服务      (加密服务)
1）安装软件包
[root@client ~]# yum -y install libreswan

2)新建IPSec密钥验证配置文件
[root@client ~]# cat /etc/ipsec.conf                //仅查看一下该主配置文件
.. ..
//最后一行：-include /etc/ipsec.d/*.conf                    //加载该目录下的所有配置文件


cp lnmp_soft/vpn/myipsec.conf    /etc/ipsec.d/           /新建该文件，参考lnmp_soft/vpn/myipsec.conf
[root@client ~]# vim /etc/ipsec.d/myipsec.conf            
    
conn IDC-PSK-NAT
    rightsubnet=vhost:%priv                        //允许建立的VPN虚拟网络
    also=IDC-PSK-noNAT
conn IDC-PSK-noNAT
    authby=secret                                    //加密认证
        ike=3des-sha1;modp1024                        //算法
        phase2alg=aes256-sha1;modp2048                //算法
    pfs=no
    auto=add
    keyingtries=3
    rekey=no
    ikelifetime=8h
    keylife=3h
    type=transport
    left=201.1.2.10                                //重要，vpn服务器本机的外网IP
    leftprotoport=17/1701
    right=%any                                    //允许任何客户端连接
    rightprotoport=17/%any


创建IPSec预定义共享密钥
[root@client ~]# cat /etc/ipsec.secrets                 //仅查看，不要修改该文件
include /etc/ipsec.d/*.secrets


[root@client ~]# vim /etc/ipsec.d/mypass.secrets        //新建该文件
201.1.2.10   %any:    PSK    "randpass"             //randpass为预共享密钥
                                                //201.1.2.10是VPN服务器的IP   PSK=per share key 预共享秘钥
启动IPSec服务
[root@client ~]# systemctl start ipsec        
netstat -ntulp |grep pluto



部署XL2TP服务  (建隧道用的)
安装软件包（软件包参考lnmp_soft）
[root@client ~]#  cd lnmp_soft/vpn
yum -y install xl2tpd-1.3.8-2.el7.x86_64.rpm

修改xl2tp配置文件（修改3个配置文件的内容）

 vim  /etc/xl2tpd/xl2tpd.conf                //修改主配置文件
[global]
.. ..    
[lns default]
.. ..
32  ip range = 192.168.3.128-192.168.3.254                    //分配给客户端的IP池
33  local ip = 201.1.2.10                                    //VPN服务器的IP地址


[root@client ~]# vim /etc/ppp/options.xl2tpd            //认证配置
21 require-mschap-v2                                         //添加一行，强制要求认证   注意空格
 #crtscts                                                //注释或删除该行 
 #lock                                                //注释或删除该行


root@client ~]# vim /etc/ppp/chap-secrets                    //修改密码文件
jacob   *       123456  *                //账户名称   服务器标记   密码   客户端IP

3）启动服务
[root@client ~]# systemctl start xl2tpd
[root@client ~]# netstat  -ntulp |grep xl2tpd        

4）设置路由转发，防火墙
[root@client ~]# echo "1" > /proc/sys/net/ipv4/ip_forward
[root@client ~]# firewall-cmd --set-default-zone=trusted

5）翻墙设置（非必需操作）
[root@client ~]# iptables -t nat -A POSTROUTING -s 192.168.3.0/24  -j SNAT --to-source 201.1.2.10


步骤三：客户端设置
启动一台Windows虚拟机，将虚拟机网卡桥接到public2，配置IP地址为201.1.2.20。
1. 新建网络连接（参考案例2），输入VPN服务器账户与密码（参考案例2）。
设置VPN连接的属性，预共享密钥是IPSec配置文件中填写的randpass



NTP时间同步
4.1 问题

本案例要求搭建一个NTP服务器，为整个网络环境中的所有主机提供时间校准服务，具体要求如下：
部署一台NTP时间服务器
设置时间服务器上层与0.centos.pool.ntp.org同步
设置本地服务器层级数量为10
允许192.168.4.0/24网络的主机同步时间
客户端验证时间是否同步

Network Time Protocol（网络时间协议）采用的是分层设计，如图-9所示，Stratum层的总数限制在15以内（包括15）

3 步骤 proxy 部署服务端

实现此案例需要按照如下步骤进行。
步骤一：部署NTP服务
1）安装软件包
[root@proxy ~]# yum -y install chrony
[root@proxy ~]# rpm -qc chrony                        //查看配置文件列表
/etc/chrony.conf
/etc/chrony.keys
.. ..


修改配置文件
[root@proxy ~]# cat /etc/chrony.conf
.. ..
server 0.centos.pool.ntp.org iburst         //server用户客户端指向上层NTP服务器

27 # Allow NTP client access from local network．　　　　　 //允许那个IP或网络访问NTP
28 　allow 192.168.4.0/16

#deny  192.168.4.1                        //拒绝那个IP或网络访问NTP

31　local stratum 10                            //设置NTP服务器的层数量 不能超过15
.. ..

启动NTP服务
[root@proxy ~]# systemctl  restart  chronyd
[root@proxy ~]# systemctl  enable   chronyd




客户端client验证

root@client ~]# vim /etc/chrony.conf
server 192.168.4.5 iburst                //设置与哪台服务器同步数据
                                        //iburst参数设置重启服务后尽快同步时间
3) 将客户端时间修改为错误的时间
[root@client ~]#  date  -s  "hour:minute"         //调整时间（小时：分钟）
[root@client ~]#  date                            //查看修改后的时间

4) 重启chrony与服务器同步时间
[root@client ~]# systemctl  restart  chronyd


































