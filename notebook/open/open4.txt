1 案例1：PHP的本地Session信息
通过Nginx调度器负载后端两台Web服务器，实现以下目标：
部署Nginx为前台调度服务器
调度算法设置为轮询
后端为两台LNMP服务器
部署测试页面，查看PHP本地的Session信息
Session：存储在服务器端，保存用户名、登陆状态等信息。
Cookies：由服务器下发给客户端，保存在客户端的一个文件里。
保存的内容主要包括：SessionID。  (用户的登录状态)
实验拓扑环境：
使用4台RHEL7虚拟机，其中一台作为Nginx前端调度器服务器（eth0:192.168.4.5,eth1:192.168.2.5）、两台虚拟机部署为LNMP服务器，分别为Web1服务器（192.168.2.100）和Web2服务器（192.168.2.200），另外一台作为测试用的Linux客户机（192.168.4.10）


.3 步骤
部署后端LNMP服务器相关软件
yum -y install gcc openssl-devel pcre-devel
yum -y install  mariadb  mariadb-server  mariadb-devel
yum -y install  php  php-mysql　php-fpm
useradd -s /sbin... nginx
./configure --user=nginx --group=nginx --with-http_ssl_module --with-stream --with-http_stub_status_module
make && make install

修改Nginx配置文件（修改默认首页与动静分离
....
location / {
            root   html;
            index  index.php  index.html   index.htm;
        }
 location  ~  \.php$  {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
           # fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi.conf;
        }



部署前端Nginx调度服务器
.. ..
upstream webs  {
        server 192.168.2.100:80;
        server 192.168.2.200:80;
  }
 server  {
          listen       80;
          server_name  localhost;
          location  /  {
              proxy_pass http://webs;
            root   html;
            index  index.php index.html index.htm;
          }
}



部署测试页面　　（web1 web2都要做)
[root@web1 ~]# cd lnmp_soft/php_scripts/
[root@web1 php_scripts]# tar -xf php-memcached-demo.tar.gz
[root@web1 php_scripts]# cd php-memcached-demo
[root@web1 php-memcached-demo]# cp -r  *  /usr/local/nginx/html/

root@web1 ~]# firefox http://192.168.2.100            //填写账户信息
[root@web1 ~]# cd /var/lib/php/session/            //查看服务器本地的Session信息
[root@web1 ~]# ls
sess_ahilcq9bguot0vqsjtd84k7244                        //注意这里的cookie:ID是随机的
[root@web1 ~]# cat sess_ahilcq9bguot0vqsjtd84k7244     //cookie ：文件

~client-----server
(1)用户登录　２．服务器验证身份
３．服务器创建一个session文件（登录状态）　４．浏览器返回登录页面获得（cookie:文件名）
５．浏览器显示页面
再次F5刷新页面
我访问首页（浏览器把cookie发给服务器)
(清除浏览器记录时候有个cookie清了就要重新打密码登录)


浏览器访问前端调度器测试（不同后端服务器Session不一致）
google-chrome http://192.168.4.5
//填写注册信息后，刷新，还需要再次注册，说明两台计算机使用的是本地Session
//第二台主机并不知道你再第一台主机已经登录，第一台主机的登录信息也没有传递给第二台主机


以上是一个有问题的的环境　需要搭一个共享服务器memcached，在下面
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
构建memcached服务------------------从启会丢失数据但这个数据库是放登录状态的，并不是用户信息.
本案例要求先快速搭建好一台memcached服务器，并对memcached进行简单的增、删、改、查操作：
安装memcached软件，并启动服务
使用telnet测试memcached服务
对memcached进行增、删、改、查等操作
memcached(内存，缓存数据库)   (没有数据库，没有数据表) set 变量＝值  端口　11211

使用yum安装软件包memcached
[root@proxy ~]# yum -y  install   memcached


memcached配置文件（查看即可，不需要修改）
[root@proxy ~]# vim /usr/lib/systemd/system/memcached.service
ExecStart=/usr/bin/memcached -u $USER -p $PORT -m $CACHESIZE -c $MAXCONN $OPTIONS


[root@proxy ~]# vim /etc/sysconfig/memcached
PORT="11211"
USER="memcached"
MAXCONN="1024"
CACHESIZE="64"        
OPTIONS=""

启服需要在usr/lib/systemd/system下有配置文件　nginx 可以在下面添加配置文件就可以实现systemctl start nginx
cd  /usr/lib/systemd/system
cp  /usr/lib/systemd/system/memcached.service  nginx.service   #弄一个模板进去修改配置文件
Description=Memcached  描述信息可以随便写
变量行不需要DD掉　
ExecStart=/usr/local/nginx/sbin/nginx

systemctl start nginx

使用telnet访问memcached服务器

1）使用yum安装telnet
[root@proxy ~]# yum -y install telnet

2)使用telnet连接服务器测试memcached服务器功能，包括增、删、改、查等操作
 :telnet  192.168.2.5  11211

Trying 192.168.4.5...
……
##提示：0表示不压缩，180为数据缓存时间，3为需要存储的数据字节数量。
set name 0 180 3                //定义变量，变量名称为name
plj                            //输入变量的值，值为plj                
STORED
get name                        //获取变量的值
VALUE name 0 3                 //输出结果
plj
END

##提示：0表示不压缩，180为数据缓存时间，3为需要存储的数据字节数量。
add myname 0 180 10            //新建，myname不存在则添加，存在则报错
set myname 0 180 10            //添加或替换变量
replace myname 0 180 10        //替换，如果myname不存在则报错
get myname                    //读取变量
append myname 0 180 10        //向变量中追加数据
delete myname                    //删除变量
flush_all                        //清空所有
quit                            //退出登录                                  



3.LNMP+memcached









