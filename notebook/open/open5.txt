案例1：安装部署Tomcat服务器　　（不适用于静态页面，效率低，只适合用于动态页面）
1.1 问题
安装部署JDK基础环境
安装部署Tomcat服务器
创建JSP测试页面，文件名为test.jsp，显示服务器当前时间
然后客户机访问此Web服务器验证效果：
使用火狐浏览器访问Tomcat服务器的8080端口，浏览默认首页
使用火狐浏览器访问Tomcat服务器的8080端口，浏览默认测试页面

.3 步骤
使用RPM安装JDK环境
[root@web1 ~]# yum -y install  java-1.8.0-openjdk                //安装JDK
[root@web1 ~]# yum -y install java-1.8.0-openjdk-headless        //安装JDK
[root@web1 ~]# java -version                                    //查看JAVA版本

安装Tomcat（apache-tomcat-8.0.30.tar.gz软件包，在lnmp_soft中有提供）
root@web1 ~]# tar -xf  apache-tomcat-8.0.30.tar.gz　　　　//解包
[root@web1 ~]# mv apache-tomcat-8.0.30  /usr/local/tomcat    //把解完的包移动到　/usr/local/tomcat 改名tomcat
[root@web1 ~]# ls /usr/local/tomcat
bin/                                            //主程序目录
lib/                                            //库文件目录   (类库) 类=函数
logs/                                          //日志目录  
temp/                           　              //临时目录
work/                                        //自动编译目录jsp代码转换servlet 
conf/                                        //配置文件目录
webapps/                                        //页面目录    

启动服务
# /usr/local/tomcat/bin/startup.sh
关闭服务
# /usr/local/tomcat/bin/shutdown.sh

4.服务器验证端口信息
 netstat -nutlp |grep java        //查看java监听的端口

：如果检查端口时，8005端口启动非常慢，默认tomcat启动需要从/dev/random读取大量的随机数据，默认该设备生成随机数据的速度很慢，可用使用下面的命令用urandom替换random（非必须操作）。
[root@web1 ~]# mv /dev/random  /dev/random.bak
[root@web1 ~]# ln -s /dev/urandom  /dev/random

户端浏览测试页面(proxy作为客户端)
[root@proxy ~]# firefox http://192.168.2.100:8080



1）创建测试JSP页面
[root@web1 ~]# vim  /usr/local/tomcat/webapps/ROOT/test.jsp
<html>
<body>
<center>                                       //居中
Now time is: <%=new java.util.Date()%>            //显示服务器当前时间
</center>
</body>
</html>

客户端浏览测试页面(proxy充当客户端角色)
[root@proxy ~]# firefox http://192.168.2.100:8080/test.jsp080


##########################################################################################################

案例2：使用Tomcat部署虚拟主机
实现两个基于域名的虚拟主机，域名分别为：www.a.com和 www.b.com
使用www.a.com域名访问的页面根路径为/usr/local/tomcat/a/ROOT
使用www.b.com域名访问的页面根路径为/usr/local/tomcat/b/base
访问www.a.com/test时，页面自动跳转到/var/www/html目录下的页面
访问页面时支持SSL加密通讯
私钥、证书存储路径为/usr/local/tomcat/conf/cert
每个虚拟主机都拥有独立的访问日志文件
配置tomcat集群环境
2.2 方案

修改server.xml配置文件，创建两个域名的虚拟主机，修改如下两个参数块：
vim /usr/local/tomcat/conf/server.xml

    <Host name="www.b.com"  appBase="b"
            unpackWARs="true" autoDeploy="true">
      </Host>
      <Host name="www.a.com"  appBase="a"
            unpackWARs="true" autoDeploy="true">
      </Host>
      <Host name="localhost"  appBase="webapps"
            unpackWARs="true" autoDeploy="true">

      </Host>

创建虚拟主机对应的页面根路径

root@web1 ~]# mkdir -p  /usr/local/tomcat/{a,b}/ROOT
[root@web1 ~]# echo "AAA"   > /usr/local/tomcat/a/ROOT/index.html
[root@web1 ~]# echo "BBB" > /usr/local/tomcat/b/ROOT/index.html


步骤二：修改www.b.com网站的首页目录为base
使用docBase参数可以修改默认网站首页路径
如果不修改默认ROOT为默认网站首页路基

… …
<Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
</Host>
<Host name="www.b.com" appBase="b" unpackWARS="true" autoDeploy="true">
<Context path="" docBase="base"/>               //网站首页路径修改为b/base
</Host>
… …
[root@web1 ~]# mkdir  /usr/local/tomcat/b/base
[root@web1 ~]# echo "BASE" > /usr/local/tomcat/b/base/index.html
[root@web1 ~]# /usr/local/tomcat/bin/shutdown.sh
[root@web1 ~]# /usr/local/tomcat/bin/startup.sh

firefox http://www.b.com:8080/        //结果为base目录下的页面内容


步骤三：跳转
当用户访问http://www.a.com/test打开/var/www/html目录下的页面

vim /usr/local/tomcat/conf/server.xml

… …
<Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
<Context path="/test" docBase="/var/www/html/" />                   //test 跳转到/var/www/html
</Host>
<Host name="www.b.com" appBase="b" unpackWARS="true" autoDeploy="true">
<Context path="" docBase="base" />                        
</Host>
… …
[root@web1 ~]# echo "Test" > /var/www/html/index.html
[root@web1 ~]# /usr/local/tomcat/bin/shutdown.sh
[root@web1 ~]# /usr/local/tomcat/bin/startup.sh


测试查看页面是否正确(proxy充当客户端角色)
[root@proxy ~]# firefox http://www.a.com:8080/test    



步骤四：配置Tomcat支持SSL加密网站

keytool -genkeypair -alias tomcat -keyalg RSA -keystore /usr/local/tomcat/keystore          //提示输入密码为:123456
//-genkeypair     生成密钥对
//-alias tomcat     密钥别名
//-keyalg RSA     定义密钥算法为RSA算法
//-keystore         定义密钥文件存储在:/usr/local/tomcat/keystore

再次修改server.xml配置文件，创建支持加密连接的Connector

[root@web1 ~]# vim /usr/local/tomcat/conf/server.xml
… …
<Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
keystoreFile="/usr/local/tomcat/keystore" keystorePass="123456" clientAuth="false" sslProtocol="TLS" />
//备注，默认这段Connector被注释掉了，打开注释，添加密钥信息即可 (区分大小写) 84~85行　　<!--　 -->　去掉


重启Tomcat服务器
[root@web1 ~]# /usr/local/tomcat/bin/shutdown.sh
[root@web1 ~]# /usr/local/tomcat/bin/startup.sh
测试
root@proxy ~]# firefox https://www.a.com:8443/
[root@proxy ~]# firefox https://www.b.com:8443/
[root@proxy ~]# firefox https://192.168.2.100:8443/



骤五：配置Tomcat日志

catalina.2019-08-13.log  //系统文件日志　起服务关服务  排错看这个
catalina.out
host-manager.2019-08-13.log  //下面都是访问日志
localhost_access_log.2019-08-13.txt
localhost.2019-08-13.log   
manager.2019-08-13.log

为每个虚拟主机设置不同的日志文件

[root@web1 ~]# vim /usr/local/tomcat/conf/server.xml
.. ..
<Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
<Context path="/test" docBase="/var/www/html/" />
#从默认localhost虚拟主机中把Valve这段复制过来，适当修改下即可
<Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"  //在最下面
               prefix="a_access" suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
</Host>
<Host name="www.b.com" appBase="b" unpackWARS="true" autoDeploy="true">
<Context path="" docBase="base" />                                                
<Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"    //上面复制
               prefix="b_access" suffix=".txt"    //改文件名
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
</Host>
.. ..

重启Tomcat服务器
[root@web1 ~]# /usr/local/tomcat/bin/shutdown.sh
[root@web1 ~]# /usr/local/tomcat/bin/startup.sh


骤六：扩展实验(配置Tomcat集群
在192.168.4.5主机上配置Nginx调度器（具体安装步骤参考前面的章节）

[root@proxy ~]# vim  /usr/local/nginx/conf/nginx.conf
http{
    upstream toms {
        server 192.168.2.100:8080;
        server 192.168.2.200:8080;
    }
    server  {
        listen 80;
        server_name localhost;
        location / {
            proxy_pass  http://toms;
        }
    }
}  


案例3：使用Varnish加速Web
CDN加速　content delivery network
Varnish[代理+缓存]

使用Varnish加速后端Web服务
代理服务器可以将远程的Web服务器页面缓存在本地
远程Web服务器对客户端用户是透明的
利用缓存机制提高网站的响应速度
使用varnishadm命令管理缓存页面
使用varnishstat命令查看Varnish状态


步骤一：构建Web服务器

systemctl restart httpd

部署Varnish缓存服务器(192.168.4.5)
编译安装软件
[root@proxy ~]# yum -y install gcc readline-devel    //安装软件依赖包
[root@proxy ~]# yum -y install ncurses-devel         //安装软件依赖包
[root@proxy ~]# yum -y install pcre-devel            //安装软件依赖包
[root@proxy ~]# yum -y install python-docutils         //安装软件依赖包
 [root@proxy ~]# useradd -s /sbin/nologin varnish                //创建账户
[root@proxy ~]# tar -xf varnish-5.2.1.tar.gz
[root@proxy ~]# cd varnish-5.2.1
[root@proxy varnish-5.2.1]# ./configure
[root@proxy varnish-5.2.1]# make && make install

复制启动脚本及配置文件（注意相对路径与绝对路径）

root@proxy varnish-5.2.1]# cp  etc/example.vcl   /usr/local/etc/default.vcl

修改代理配置文件
[root@proxy ~]# vim  /usr/local/etc/default.vcl
backend default {
     .host = "192.168.2.100";
     .port = "80";
 }

启动服务
 [root@proxy ~]# varnishd  -f /usr/local/etc/default.vcl
//varnishd命令的其他选项说明如下：
//varnishd -s malloc,128M        定义varnish使用内存作为缓存，空间为128M
//varnishd -s file,/var/lib/varnish_storage.bin,1G 定义varnish使用文件作为缓存






步骤三：客户端测试

1）客户端开启浏览器访问
[root@client ~]# curl http://192.168.4.5
步骤四：其他操作

查看varnish日志
[root@proxy ~]# varnishlog                        //varnish日志   客户机访问一次就有信息
[root@proxy ~]# varnishncsa                    //访问日志

更新缓存数据，在后台web服务器更新页面内容后，用户访问代理服务器看到的还是之前的数据，说明缓存中的数据过期了需要更新（默认也会自动更新，但非实时更新）。
[root@proxy ~]# varnishadm  
varnish> ban req.url 　~　 .*
//清空缓存数据，支持正则表达式









